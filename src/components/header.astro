---
const navLinks = [
  { href: "#home", text: "Home" },
  { href: "#about", text: "About" },
  { href: "#experience", text: "Experience" },
  { href: "#projects", text: "Projects" },
  { href: "#skills", text: "Skills" },
  { href: "#contact", text: "Contact" },
];
---

<header id="header-nav" class="fixed top-5 left-1/2 -translate-x-1/2 z-50">
  <nav class="relative flex items-center rounded-full border border-neutral-300 bg-white/80 -z-10 px-4 py-2 text-m font-bold ">
    <div id="active-nav-indicator" class="absolute bottom-0 left-0 z-10 h-full rounded-full bg-black transition-all duration-300 ease-in-out">
    </div>
    {navLinks.map((link) => (
      <a
        href={link.href}
        class="z-11 text-gray-700 relative rounded-full px-3 py-1 transition-all duration-300 ease-in-out hover:text-black"
      >
        {link.text}
      </a>
    ))}
  </nav>
</header>

<script>
  // @ts-nocheck
  const header = document.getElementById("header-nav");
  if (!header) return;

  const indicator = document.getElementById("active-nav-indicator");
  const navLinks = header.querySelectorAll("a");

  const sections = Array.from(navLinks).map(link => {
    const id = link.getAttribute("href");
    if (id) {
      try {
        return document.querySelector(id);
      } catch (e) {
        console.error(`Error selecting element with id: ${id}`, e);
        return null;
      }
    }
    return null;
  }).filter(section => section !== null);

  if (sections.length === 0) return;

  let activeLink = null;

  function setActiveLink(link) {
    if (!link) return;

    if (activeLink) {
      activeLink.classList.remove("text-white");
      activeLink.classList.add("text-gray-700");
    }

    link.classList.add("text-white");
    link.classList.remove("text-gray-700");

    if (indicator) {
      indicator.style.width = `${link.offsetWidth}px`;
      indicator.style.left = `${link.offsetLeft}px`;
    }
    activeLink = link;
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const link = Array.from(navLinks).find(a => a.getAttribute("href") === `#${entry.target.id}`);
        if (link) {
          setActiveLink(link);
        }
      }
    });
  }, { rootMargin: "-50% 0px -50% 0px", threshold: 0 });

  sections.forEach(section => {
    if (section) observer.observe(section);
  });

  // Initial active link
  setTimeout(() => {
      const initialLink = navLinks.length > 0 ? navLinks[0] : null;
      setActiveLink(initialLink);
  }, 100);

  // Update on click
  navLinks.forEach(link => {
      link.addEventListener("click", (e) => {
          setActiveLink(link)
      })
  })
</script>
